digraph ds
{
compound = true;
splines = line;

subgraph cluster_Node
{
node[shape = record];
label = "TValue";
luaNode[label = "<value> TValue i_val | <key>TKey i_key"];
}

subgraph cluster_TKey
{
node[shape = record];
label = "TKey";
nk[label = "Value value_ | int tt_ | struct Node *next"];
tvk[label = "TValue tvk"];
}

subgraph cluster_TValue
{
node[shape = record];
label = "TValue";
TValue[label = "<value> Value value_| <tag> int tt_"];
}

subgraph cluster_type
{
node[shape = record];
label = "tag";
nil[label = "LUA_TNIL"];
bool[label = "LUA_TBOOLEAN"];
lightuserdata[label = "LUA_TBOOLEAN"];
num[label = "LUA_TNUMBER"];
string[label = "LUA_TNUMBER"];
table[label = "LUA_TTABLE"];
func[label = "LUA_TFUNCTION"];
userdata[label = "LUA_TUSERDATA"];
thread[label = "LUA_TTHREAD"];
}

subgraph cluster_Value
{
node[shape = record];
label = "Value";
gc[label = "GCObject *gc"];
p[label = "void *p"];
b[label = "int b"];
f[label = "lua_CFunction f"];
n[label = "lua_Number n"];
}

subgraph cluster_GCObject
{
node[shape = record];
label = "GCObject";
gch[label = "GCheader gch"];
ts[label = "union TString ts"];
u[label = "union Udata u"];
cl[label = "union Closure cl"];
h[label = "struct Table h"];
p[label = "struct Proto p"];
uv[label = "struct UpVal uv"];
th[label = "struct lua_State th"];
}

luaNode:value -> TValue;
luaNode:key -> nk;
TValue:tag -> table;
TValue:value-> gc;
gc -> h;
}

